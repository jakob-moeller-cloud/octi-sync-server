name: Build

on:
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write
  packages: write
  issues: write
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  goreleaser:
    name: ${{ (github.event_name == 'pull_request' && 'Snapshot') || 'Release' }}
    needs:
      - go-test
      - openapi
      - lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: git fetch --force --tags
      - uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          cache: true

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@v2.7.0
        with:
          cosign-release: 'v1.12.1'

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@21f251affc0769ccac8a1cf17e937592fb492337
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: docker context create builders

      # Setup Builder
      # https://github.com/ docker/setup-buildx-action
      - name: Setup Docker buildx
        id: buildx
        uses: docker/setup-buildx-action@f385c9ed953addec511152eb20a6021fe3d09fe6
        with:
          endpoint: builders

      - uses: goreleaser/goreleaser-action@v3
        name: ${{ (github.event_name == 'pull_request' && 'Snapshot') || 'Release' }}
        with:
          distribution: goreleaser
          version: latest
          args: release
        env:
          BUILDER: ${{ steps.buildx.outputs.name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
      - name: Store Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: dist/artifacts.json
      - name: Store Metadata
        uses: actions/upload-artifact@v3
        with:
          name: metadata
          path: dist/metadata.json
  go-test:
    name: Go ${{ matrix.go }} Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ '1.19' ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}
          cache: true
      - run: go test ./... -covermode=atomic -coverprofile=coverage.out --race
      - name: Convert coverage.out to coverage.lcov
        uses: jandelgado/gcov2lcov-action@v1
      - name: Coveralls
        uses: coverallsapp/github-action@v1.1.2
        with:
          github-token: ${{ secrets.github_token }}
          path-to-lcov: coverage.lcov
          flag-name: Go ${{ matrix.go }}
          parallel: true
  collect-coverage:
    needs: go-test
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.github_token }}
          parallel-finished: true
  openapi:
    name: Verify ${{ matrix.version }} OpenAPI
    runs-on: ubuntu-latest  # windows-latest | macos-latest
    strategy:
      matrix:
        version: [ 'v1' ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          cache: true
      - run: go install github.com/deepmap/oapi-codegen/cmd/oapi-codegen@v1.11.0
      - run: go install github.com/golang/mock/mockgen@v1.6.0
      - run: go generate ./...
      - name: Check Changed files for ${{ matrix.version }}
        uses: tj-actions/verify-changed-files@v11.1
        id: verify-changed-files
        with:
          files: |
            **/*
      - name: Fail if ${{ matrix.version }} OpenAPI spec changed after running code-generation with oapi-codegen.
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        run: |
          echo "Changed OpenAPI Spec: ${{ steps.verify-changed-files.outputs.changed_files }}"
          run: exit 1
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
      - uses: golangci/golangci-lint-action@v3